buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

group = 'bonux.yada'
version = '0.0.1-SNAPSHOT'

ext {
    springBootVersion = '2.0.2.RELEASE'

    libraries = [
            jdbcH2      : 'com.h2database:h2',
            jdbcPostgres: 'org.postgresql:postgresql',
            db_support  : ["org.springframework:spring-jdbc",
                           "com.zaxxer:HikariCP"],
            db_init     : 'org.liquibase:liquibase-core',
            test        : 'org.springframework.boot:spring-boot-starter-test']
    qa = file('qa.gradle').absolutePath
}

gradle.taskGraph.beforeTask { Task task ->
    println "executing $task ..."
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "FAILED"
    } else {
        println "done"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    afterEvaluate { Project project1 ->
        if (project1 != project(':infra')) {
            repositories {
                jcenter()
            }

            compileJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }

            compileTestJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'junit',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                    ]
                    classpath = files()
                }
            }

            test {
                inputs.property("moduleName", moduleName)
                doFirst {
                    jvmArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'ALL-MODULE-PATH',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                    ]
                    classpath = files()
                }
            }
        }
    }
}
