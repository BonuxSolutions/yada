apply plugin: 'checkstyle'
apply plugin: 'pmd'

group = 'bonux.yada'
version = '0.0.1-SNAPSHOT'

ext.springBootVersion = '2.0.2.RELEASE'
ext.sonarqubePluginVersion = '2.6.2'
ext.checkstyleVersion = '8.9'
ext.sevntuChecksVersion = '1.29.0'

ext.libraries = [
        jdbcH2      : 'com.h2database:h2',
        jdbcPostgres: 'org.postgresql:postgresql',
        db_support  : ["org.springframework:spring-jdbc",
                       "com.zaxxer:HikariCP"],
        db_init     : 'org.liquibase:liquibase-core',
        test        : 'org.springframework.boot:spring-boot-starter-test'
]

gradle.taskGraph.beforeTask { Task task ->
    println "executing $task ..."
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        println "FAILED"
    }
    else {
        println "done"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

checkstyle {
    ignoreFailures = true
    configFile = file("${project.rootDir}/checkstyle.xml")

    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
        checkstyle "com.github.sevntu-checkstyle:sevntu-checks:${sevntuChecksVersion}"
    }
}

subprojects {
    afterEvaluate { Project project1 ->
        if (project1 != project(':infra')) {
            repositories {
                jcenter()
            }

            compileJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }

            compileTestJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'junit',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                    ]
                    classpath = files()
                }
            }

            test {
                inputs.property("moduleName", moduleName)
                doFirst {
                    jvmArgs = [
                            '--module-path', classpath.asPath,
                            '--add-modules', 'ALL-MODULE-PATH',
                            '--add-reads', "$moduleName=junit",
                            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                    ]
                    classpath = files()
                }
            }
        }
    }
}
